{"version":3,"file":"static/js/779.0566ce4d.chunk.js","mappings":"iTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IACMC,EAAS,IAAIC,gBAAgB,CACjCC,QAFc,qCAKHC,EAAa,mCAAG,oGACJJ,EAAAA,EAAAA,IAAA,8BAAiCC,IAD7B,cACrBI,EADqB,yBAEpBA,EAASC,MAFW,2CAAH,qDAKbC,EAAW,mCAAG,WAAMC,GAAN,uFACFR,EAAAA,EAAAA,IAAA,wBAA2BC,EAA3B,kBAA2CO,IADzC,cACnBH,EADmB,yBAElBA,EAASC,MAFS,2CAAH,sDAKXG,EAAe,mCAAG,WAAMC,GAAN,uFACNV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,YAAgCT,IAD1B,cACvBI,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKfK,EAAe,mCAAG,WAAMD,GAAN,uFACNV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,oBAAwCT,IADlC,cACvBI,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKfM,EAAe,mCAAG,WAAMF,GAAN,uFACNV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,oBAAwCT,IADlC,cACvBI,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,qD,+IC1BfO,EAAiBC,EAAAA,GAAAA,IAAH,0CAIdC,EAAOD,EAAAA,GAAAA,GAAH,mF,SCiCjB,EAjCgB,WACd,OAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAYR,IAVAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,IACXR,EAAAA,EAAAA,IAAgBS,GACbG,MAAK,SAAAnB,GACJa,EAAWb,EAASoB,SACpBL,GAAW,EACZ,IACAM,MAAMC,QAAQC,IAClB,GAAE,CAACP,IAECJ,EACL,OAAuB,IAAnBA,EAAQY,QAAqB,qEAG/B,UAAChB,EAAD,WACGM,IAAW,SAACW,EAAA,EAAD,KACZ,SAACf,EAAD,UACGE,EAAQc,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,oCAAYD,MACZ,uBAAIC,MAFGF,EADE,QASpB,C","sources":["api/moviesApi.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '90a449e7773f96eeaad80a5e660b8095';\nconst params = new URLSearchParams({\n  api_key: API_KEY,\n});\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`/trending/movie/day?${params}`);\n  return response.data;\n};\n\nexport const searchMovie = async query => {\n  const response = await axios.get(`/search/movie?${params}&query=${query}`);\n  return response.data;\n};\n\nexport const getMovieDetails = async movie_id => {\n  const response = await axios.get(`/movie/${movie_id}?${params}`);\n  return response.data;\n};\n\nexport const getMovieCredits = async movie_id => {\n  const response = await axios.get(`/movie/${movie_id}/credits?${params}`);\n  return response.data;\n};\n\nexport const getMovieReviews = async movie_id => {\n  const response = await axios.get(`/movie/${movie_id}/reviews?${params}`);\n  return response.data;\n};","import styled from 'styled-components';\n\nexport const ReviewsWrapper = styled.div`\n  padding: 12px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieReviews } from \"api/moviesApi\";\nimport { Loader } from 'components/Loader/Loader';\nimport { List, ReviewsWrapper } from \"./Reviews.styled\";\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    getMovieReviews(movieId)\n      .then(response => {\n        setReviews(response.results);\n        setLoading(false);\n      })\n      .catch(console.log);\n  }, [movieId]);\n\n  if (!reviews) return;\n  if (reviews.length === 0) return <p>We don't have any reviews for this movie</p>;\n\n  return (\n    <ReviewsWrapper>\n      {loading && <Loader />}\n      <List>\n        {reviews.map(({ id, author, content }) => (\n          <li key={id}>\n            <b>Author: {author}</b>\n            <p>{content}</p>\n          </li>\n        ))}\n      </List>\n    </ReviewsWrapper>\n  );\n};\n\nexport default Reviews;\n"],"names":["axios","params","URLSearchParams","api_key","fetchTrending","response","data","searchMovie","query","getMovieDetails","movie_id","getMovieCredits","getMovieReviews","ReviewsWrapper","styled","List","useState","reviews","setReviews","loading","setLoading","movieId","useParams","useEffect","then","results","catch","console","log","length","Loader","map","id","author","content"],"sourceRoot":""}