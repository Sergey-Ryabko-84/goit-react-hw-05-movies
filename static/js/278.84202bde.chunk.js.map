{"version":3,"file":"static/js/278.84202bde.chunk.js","mappings":"8SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IACMC,EAAS,IAAIC,gBAAgB,CACjCC,QAFc,qCAKHC,EAAa,mCAAG,oGACJJ,EAAAA,EAAAA,IAAA,8BAAiCC,IAD7B,cACrBI,EADqB,yBAEpBA,EAASC,MAFW,2CAAH,qDAKbC,EAAW,mCAAG,WAAMC,GAAN,uFACFR,EAAAA,EAAAA,IAAA,wBAA2BC,EAA3B,kBAA2CO,IADzC,cACnBH,EADmB,yBAElBA,EAASC,MAFS,2CAAH,sDAKXG,EAAe,mCAAG,WAAMC,GAAN,uFACNV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,YAAgCT,IAD1B,cACvBI,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKfK,EAAe,mCAAG,WAAMD,GAAN,uFACNV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,oBAAwCT,IADlC,cACvBI,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKfM,EAAe,mCAAG,WAAMF,GAAN,uFACNV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,oBAAwCT,IADlC,cACvBI,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,qD,sGCgC5B,UAtDe,WAAO,IAAD,EACnB,GAA4BO,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAW,UAAGJ,EAAaK,IAAI,gBAApB,QAAgC,IAEjDC,EAAAA,EAAAA,YAAU,WACR,GAAoB,KAAhBF,EAAoB,OAAOR,EAAU,IAEzCE,GAAW,IACXV,EAAAA,EAAAA,IAAYgB,GACTG,MAAK,SAAArB,GACJU,EAAUV,EAASsB,SACnBV,GAAW,EACZ,IACAW,MAAMC,QAAQC,IAClB,GAAE,CAACP,IAUJ,OACE,6BACE,kBAAMQ,SAVW,SAAAC,GACnBA,EAAEC,iBACF,IAAMzB,EAAQwB,EAAEE,cAAcC,SAASC,MAAMC,MACxB,KAAjB7B,EAAM8B,QAAeC,EAAAA,GAAAA,MAAY,qBACrCnB,EAAiC,KAAjBZ,EAAM8B,OAAgB,CAAE9B,MAAAA,GAAU,CAAC,GACnDwB,EAAEE,cAAcM,OACjB,EAIG,WACE,kBAAOC,KAAK,OAAOC,KAAK,WACxB,mBAAQD,KAAK,SAAb,uBAEDzB,IAAW,SAAC,IAAD,IACXF,EAAO6B,OAAS,IACf,wBACG7B,EAAO8B,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAM5B,GAAlC,SACGyB,KAFID,EADC,MASG,IAAlB/B,EAAO6B,QAAgC,KAAhBpB,IACtB,gEACqC,0BAAOA,IAD5C,UAMP,C","sources":["api/moviesApi.js","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '90a449e7773f96eeaad80a5e660b8095';\nconst params = new URLSearchParams({\n  api_key: API_KEY,\n});\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`/trending/movie/day?${params}`);\n  return response.data;\n};\n\nexport const searchMovie = async query => {\n  const response = await axios.get(`/search/movie?${params}&query=${query}`);\n  return response.data;\n};\n\nexport const getMovieDetails = async movie_id => {\n  const response = await axios.get(`/movie/${movie_id}?${params}`);\n  return response.data;\n};\n\nexport const getMovieCredits = async movie_id => {\n  const response = await axios.get(`/movie/${movie_id}/credits?${params}`);\n  return response.data;\n};\n\nexport const getMovieReviews = async movie_id => {\n  const response = await axios.get(`/movie/${movie_id}/reviews?${params}`);\n  return response.data;\n};","import { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport { searchMovie } from 'api/moviesApi';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const searchQuery = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (searchQuery === '') return setMovies([]);\n\n    setLoading(true);\n    searchMovie(searchQuery)\n      .then(response => {\n        setMovies(response.results);\n        setLoading(false);\n      })\n      .catch(console.log);\n  }, [searchQuery]);\n\n  const onSubmitForm = e => {\n    e.preventDefault();\n    const query = e.currentTarget.elements.input.value;\n    if (query.trim() === '') toast.error('Enter your query!');\n    setSearchParams(query.trim() !== '' ? { query } : {});\n    e.currentTarget.reset();\n  };\n\n  return (\n    <main>\n      <form onSubmit={onSubmitForm}>\n        <input type=\"text\" name=\"input\" />\n        <button type=\"submit\">Search</button>\n      </form>\n      {loading && <Loader />}\n      {movies.length > 0 && (\n        <ul>\n          {movies.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n      {movies.length === 0 && searchQuery !== '' && (\n        <p>\n          No movie was found for your query \"<span>{searchQuery}</span>\".\n        </p>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;"],"names":["axios","params","URLSearchParams","api_key","fetchTrending","response","data","searchMovie","query","getMovieDetails","movie_id","getMovieCredits","getMovieReviews","useState","movies","setMovies","loading","setLoading","useSearchParams","searchParams","setSearchParams","location","useLocation","searchQuery","get","useEffect","then","results","catch","console","log","onSubmit","e","preventDefault","currentTarget","elements","input","value","trim","toast","reset","type","name","length","map","id","title","to","state","from"],"sourceRoot":""}